#+AUTHOR: Alex Lu
#+EMAIL: alexluigit@gmail.com
#+startup: content

* *Dirvish*

[[https://melpa.org/#/dirvish][file:https://melpa.org/packages/dirvish-badge.svg]]
[[https://github.com/alexluigit/dirvish/actions/workflows/melpazoid.yml][file:https://github.com/alexluigit/dirvish/actions/workflows/melpazoid.yml/badge.svg]]

#+begin_quote
Wish you a better dired.
#+end_quote

#+ATTR_ORG: :width 1024
[[./assets/dirvish.png]]

| Preview                    | Layout1                        | Layout2               |
|----------------------------+--------------------------------+-----------------------|
| [[./assets/async-preview.gif]] | [[./assets/multiple-instance.gif]] | [[./assets/maximize.gif]] |

** Introduction

*Dirvish* is a minimalistic file manager based on *Dired*.

This package empowers dired by giving it a modern UI in an unintrusive
way. Emacs users deserve a file manager better than those popular ones in
terminal such as [[https://github.com/ranger/ranger][ranger]], [[https://github.com/vifm/vifm][vifm]], [[https://github.com/gokcehan/lf][lf]] since Emacs is more than a terminal emulator.

The name *dirvish* is a tribute to [[https://github.com/justinmk/vim-dirvish][vim-dirvish]].

*** Dependencies

| Package           | Description                | Required |
|-------------------+----------------------------+----------|
| =exa=               | Generate directory preview | Optional |
| =all-the-icons.el=  | Icon support               | Optional |
| =pdftoppm=          | Generate pdf preface image | Optional |
| =imagemagick=       | Generate image cache       | Optional |
| =ffmpegthumbnailer= | Generate video thumbnailer | Optional |
| =epub-thumbnailer=  | Generate epub thumbnailer  | Optional |
| =zipinfo=           | Preview zip files          | Optional |
| =mediainfo=         | Display media metadata     | Optional |

*** Installation

Dirvish is available from [[https://melpa.org][Melpa]].

**** For =package.el= user

You can install it directly via =package-install= if you have melpa in your =package-archives=.

**** For =straight.el= user

#+begin_src emacs-lisp
  (straight-use-package 'dirvish)
#+end_src

Alternatively, install it by using *use-package* and *straight* in tandem.

#+begin_src emacs-lisp
  (use-package dirvish
    :straight t)
#+end_src

**** Manual install

To install it manually, first clone this repository,

#+begin_src bash
  git clone https://github.com/alexluigit/dirvish
#+end_src

then add =path/to/dirvish= to your =load-path=.

#+begin_src emacs-lisp
  (add-to-list 'load-path "/path/to/dirvish")
  (require 'dirvish)
#+end_src

*** Quickstart
**** =dirvish= && =dirvish-dired=

After installation, just =M-x= and run =dirvish=.

=dirvish= command takes up the whole frame, but sometimes we prefer managing files
inside current window, just like how dired does it. To get a "dirvish-ish"
dired, use =dirvish-dired=.

In either case, you have access to all your Dired commands *except* a few remapped
ones in =dirvish-mode-map=.

/NOTICE/: if some dired command doesn't work as expected, please report an [[https://github.com/alexluigit/dirvish/issues][issue]].

**** Override Dired

When you feel like to replace *Dired* with *Dirvish* completely (highly
recommended!), all you need is enable =dirvish-override-dired-mode=.

Now all your Dired entry commands incluing =dired=, =dired-other-window/tab/frame=,

=dired-jump[-other-window]= do its job in a "dirvish" way.

**** In relation to Dired config

Dirvish respects all of your dired options *except* following ones:

| Option                                   | Reason                                                  |
|------------------------------------------+---------------------------------------------------------|
| =dired-kill-when-opening-new-dired-buffer= | Dirvish kill all buffers this instance holds when exits |
| =dired-switches-in-mode-line=              | Dirvish buffer doesn't come with a mode line by default |

** Features
*** File preview

=dirvish= command places a preview window at right side of frame to show the
content of selected file. To toggle it, use =dired-hide-details-mode=, or set
=dirvish-enable-preview= to nil.

The preview in Dirvish can be generated either directly from some elisp
function, or by a shell command. See =dirvish-preview-dispatchers= for more
details. TODO: better doc on this, maybe a wiki article.

*** Multiple instances

You can open multiple dirvish instance across diffent widnows / tabs /
frames. Each one of them has their own parent/preview buffer list that are being
killed during deactivation of this instance.

Although every dirvish instance is independent from each other, you can mark
files across multiple instance, and paste/move marked files to current one with
=dirvish-yank=.

NOTE: =dirvish-yank= command is included in the =dirvish-yank.el= extension, which
is not being loaded by default, you need to require it in your config before
using it.

*** Drop-in replacement commands

*Dired* is superb, but from a modern file manager's (like *ranger*, *lf*) perspective,
, some Dired commands are quite unintuitive.

Dirvish provides a few drop-in replacement commands for those not-so-modern
dired commands, such as =dirvish-sort-by-criteria= is a more user friendly version
of =dired-sort-toggle-or-edit=. 

*** Asynchronous I/O

To prevent emacs from getting freezes, dirvish uses external process to deal
with heavy I/O task, such as file copy/move, directory preview, or image cache
generation etc.

*** Bulit-in icon support

You don't need [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] anymore since dirvish have built-in icon
support. This native icon solution has several advantages over
*dired + all-the-icons-dired*, those are:

**** Better integration with line highlighting

  If you want to highlight current (cursor) line in dired, normally you enable
  =hl-line-mode= or add it to =dired-mode-hook=, but it doesn't play very well with
  =all-the-icons-dired-mode= due to conflict overlays. Dirvish handles line
  highlighting and icon rendering on its own.

  + hl-line-mode + all-the-icons-dired-mode ::

  [[./assets/dired-line.png]]

  + dirvish ::

  [[./assets/dirvish-line.png]]

**** Lazy rendering

Dirvish doesn't render icons for all the files in a directory eagerly, instead
it only render icons that are displayed within the viewport. Visiting =/usr/bin=
(or any directory with over 1000 files) will no longer freeze your Emacs.

*** Minibuffer file preview

=dirvish-minibuf-preview-mode= is a feature to preview file when narrowing
file/directory candidates using minibuffer.

- Why does this feature exist? ::

  *Dirvish* and *minibuffer* seem unrelated at first glance. But when it comes to
  display a file preview, they actually share the same mechanism, that is: /get
  file path under the cursor and update preview window accordingly./ Displaying
  minibuffer file preview in a "dirvish" way, not only a lot of source code can
  be reused, but also related user configurations.  In other words, you don't
  have to configure file preview for dirvish and for minibuffer separately, they
  will always /display the same thing./

This feature only available for *vertico/selectrum*.

** Configuration
*** Options

| Option                          | Type     | Description                             | default             |
|---------------------------------+----------+-----------------------------------------+---------------------|
| =dirvish-cache-dir=               | String   | Cache directory                         | "~/.cache/dirvish"  |
| =dirvish-trash-dir-alist=         | Alist    | Setup multiple trash cans.              | nil                 |
| =dirvish-history-length=          | Integer  | The length of history ring              | 30                  |
| =dirvish-enable-preview=          | Boolean  | Enable file preview                     | t                   |
| =dirvish-depth=                   | Integer  | Level of dirs to traverse up            | 1                   |
| =dirvish-parent-max-width=        | Float    | Max width of parent windows             | 0.12                |
| =dirvish-parent-face-remap-alist= | Alist    | See: M-x =describe-variable=              |                     |
| =dirvish-preview-width=           | Float    | Width of preview window                 | 0.65                |
| =dirvish-body-fontsize-increment= | Float    | Increase fontsize in dirvish body       | 0.1                 |
| =dirvish-footer-format=           | String   | See: M-x =describe-variable=              |                     |
| =dirvish-header-style=            | Option   | Style for full-frame dirvish header     | large               |
| =dirvish-header-text-fn=          | Function | A function for composing header text    | dirvish-header-text |
| =dirvish-header-face-remap-alist= | Alist    | See: M-x =describe-variable=              |                     |
| =dirvish-show-icons=              | Boolean  | Show icons                              | t                   |
| =dirvish-icon-delimiter=          | String   | The delimiter between icon and filename | "\t"                |
| =dirvish-icon-monochrome=         | Boolean  | Whether icon inherit =face-at-point=      | t                   |
| =dirvish-icon-v-offset=           | Float    | Icon's vertical offset                  | 0.01                |
| =dirvish-preview-dispatchers=     | Hook     | See: M-x =describe-variable=              |                     |

*** Hooks

| Hook                       | Description                               |
|----------------------------+-------------------------------------------|
| =dirvish-activation-hook=    | Hook for dirvish instance initialization. |
| =dirvish-mode-hook=          | Hook for parent buffer initialization.    |
| =dirvish-preview-setup-hook= | Hook for preview buffer initialization.   |

*** Example config

Here is an example config. There are several optional third-party packages in
this section, enable them if you want. The compatibility with other packages
still needs work, but generally Dirvish works fine with Dired ecosystem.

#+begin_src emacs-lisp
  (use-package dired
    :config
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-dwim-target t)
    (setq dired-listing-switches "-AGhlv --group-directories-first --time-style=long-iso"))

  (use-package dired-x
    ;; Enable dired-omit-mode by default
    ;; :hook
    ;; (dired-mode . dired-omit-mode)
    :config
    ;; Make dired-omit-mode hide all "dotfiles"
    (setq dired-omit-files
          (concat dired-omit-files "\\|^\\..*$")))

  ;; Addtional syntax highlighting for dired
  (use-package diredfl
    :hook
    (dired-mode . diredfl-mode))

  ;; Narrow a dired buffer to the files matching a string.
  (use-package dired-narrow
    :config
    (bind-key "C-c C-n" 'dired-narrow dired-mode-map))

  ;; A poor man's treemacs
  (use-package dired-subtree
    :config
    (bind-key "TAB" 'dired-subtree-toggle dired-mode-map))

  (use-package dirvish
    :config
    ;; Override dired with dirvish globally
    (dirvish-override-dired-mode)
    ;; Enable file preview when narrowing files in minibuffer.
    ;; This feature only support `vertico/selectrum' for now.
    ;; (dirvish-minibuf-preview-mode)
    :bind
    (:map dirvish-mode-map
          ("SPC" . dirvish-show-history)
          ;; ([remap dired-do-copy] . dirvish-yank)
          ("o" . dirvish-other-buffer)))
#+end_src

** Similar projects
*** Ranger.el

Although these 2 packages have something in common, unlike *ranger.el*, which
tries to become an all-around emulation of ranger, *dirvish* is more bare-bone,
meaning it does *NOT* try to port all "goodness" from ranger. Instead, it only
aims to:

- Provides a better dired UI
- Integrates all sensible dired commands

** Issues

- Bugs are expected on Windows since dirvish has not been tested on it.
- *WIP*: compatibility issues with some third-party dired related packages.
- *WIP*: marks does not display correctly when revisit the same dirvish buffer.

Feel free to report issues.

** Acknowledgements

This package is inspired a lot by [[https://github.com/ralesi/ranger.el][ranger.el]], thanks @ralesi for creating and
maintaining it.

** Copying

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/.
