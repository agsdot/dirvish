#+AUTHOR: Alex Lu
#+EMAIL: alexluigit@gmail.com
#+startup: content

* *Dirvish*

[[https://melpa.org/#/dirvish][file:https://melpa.org/packages/dirvish-badge.svg]]
[[https://github.com/alexluigit/dirvish/actions/workflows/melpazoid.yml][file:https://github.com/alexluigit/dirvish/actions/workflows/melpazoid.yml/badge.svg]]

#+begin_quote
Wish you a better dired.
#+end_quote

#+ATTR_ORG: :width 1024
[[./assets/dirvish.png]]

| Preview                    | Layout1                        | Layout2               |
|----------------------------+--------------------------------+-----------------------|
| [[./assets/async-preview.gif]] | [[./assets/multiple-instance.gif]] | [[./assets/maximize.gif]] |

** Introduction

*Dirvish* is a minimalistic file manager based on *Dired*.

This package empowers dired by giving it a modern UI in an unintrusive
way. Emacs users deserve a file manager better than those popular ones in
terminal such as [[https://github.com/ranger/ranger][ranger]], [[https://github.com/vifm/vifm][vifm]], [[https://github.com/gokcehan/lf][lf]] since Emacs is more than a terminal emulator.

The name *dirvish* is a tribute to [[https://github.com/justinmk/vim-dirvish][vim-dirvish]].

*** Dependencies

| Package           | Description                | Required |
|-------------------+----------------------------+----------|
| =exa=               | Generate directory preview | Optional |
| =all-the-icons.el=  | Icon support               | Optional |
| =pdftoppm=          | Generate pdf preface image | Optional |
| =imagemagick=       | Generate image cache       | Optional |
| =ffmpegthumbnailer= | Generate video thumbnailer | Optional |
| =epub-thumbnailer=  | Generate epub thumbnailer  | Optional |
| =zipinfo=           | Preview zip files          | Optional |
| =mediainfo=         | Display media metadata     | Optional |

*** Installation

Dirvish is available from [[https://melpa.org][Melpa]].

**** For =package.el= user

You can install it directly via =package-install= if you have melpa in your =package-archives=.

**** For =straight.el= user

#+begin_src emacs-lisp
  (straight-use-package 'dirvish)
#+end_src

Alternatively, install it by using *use-package* and *straight* in tandem.

#+begin_src emacs-lisp
  (use-package dirvish
    :straight t)
#+end_src

**** Manual install

To install it manually, first clone this repository,

#+begin_src bash
  git clone https://github.com/alexluigit/dirvish
#+end_src

then add =path/to/dirvish= to your =load-path=.

#+begin_src emacs-lisp
  (add-to-list 'load-path "/path/to/dirvish")
  (require 'dirvish)
#+end_src

*** Quickstart
**** =dirvish= && =dirvish-dired=

After installation, just =M-x= =dirvish=.

Since Dirvish is derived from Dired, all Dired commands stay the same as in
=Dired-mode=, try pressing "(" to toggle =dired-hide-details-mode=, or =q= to quit
this instance.

=dirvish= command takes up the whole frame, but sometimes we prefer managing files
inside of current window, just like how dired does it. To get a "dirvish-ish"
dired, use =dirvish-dired=.

If you find some any command doesn't work as expected, please report an [[https://github.com/alexluigit/dirvish/issues][issue]].

**** Override Dired

When you feel like to replace *Dired* with *Dirvish* completely (highly
recommended!), all you need is enable =dirvish-override-dired-mode=.

Now all Dired entry commands incluing =dired[-other-window/tab/frame]=,
=dired-jump[-other-window]= do their jobs in a "dirvish" way.

**** In relation to Dired config

Dirvish respects all of your dired options *except* the following ones:

| Option                                   | Reason                                                  |
|------------------------------------------+---------------------------------------------------------|
| =dired-kill-when-opening-new-dired-buffer= | Dirvish kill all buffers this instance holds when exits |
| =dired-switches-in-mode-line=              | Customize =dirvish-mode-line-format= instead            |

** Features
*** File preview

=dirvish= command places a preview window at right side of frame to show the
content of selected file.

The preview in Dirvish can be generated either directly from elisp or by the
help of shell commands. See =dirvish-preview-dispatchers= for more details. TODO:
better doc on this, maybe a wiki article.

*** Multiple instances

You can open multiple dirvish instance across different windows / tabs /
frames. Each one of them have private attributes such as parent buffer
list, depth, =ls= command switches and so on.

Although the independence of Dirvish instance, there are commands that operate
on multiple instances such as =dirvish-yank=, you can take it as an example to
create your own cross-instance commands when you need to.

*** Drop-in replacement commands

*Dired* is superb, but from a modern file manager's (like *ranger*, *lf*) perspective,
, some Dired commands are quite unintuitive.

Dirvish provides a few drop-in replacement commands for those not-so-modern
dired commands, such as =dirvish-sort-by-criteria= is a more user friendly version
of =dired-sort-toggle-or-edit=. 

*** Asynchronous I/O

To prevent emacs from getting freezes, dirvish uses external process to deal
with heavy I/O task, such as file copy/move, directory preview, or image cache
generation etc.

*** Bulit-in icon support

You don't need [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] anymore since dirvish have built-in icon
support. This native icon solution has several advantages over
*dired + all-the-icons-dired*, those are:

**** Better integration with line highlighting

  If you want to highlight current (cursor) line in dired, normally you enable
  =hl-line-mode= or add it to =dired-mode-hook=, but it doesn't play very well with
  =all-the-icons-dired-mode= due to conflict overlays. Dirvish handles line
  highlighting and icon rendering on its own.

  [[./assets/line-comparison.png]]

**** Lazy rendering

Dirvish doesn't render icons for all the files in a directory eagerly, instead
it only render icons that are displayed within the viewport. Visiting =/usr/bin=
(or any directory with over 1000 files) will no longer freeze your Emacs.

*** Minibuffer file preview

=dirvish-minibuf-preview-mode= is a feature to preview file when narrowing
file/directory candidates using minibuffer.

- Why does this feature exist? ::

  *Dirvish* and *minibuffer* seem unrelated at first glance. But when it comes to
  display a file preview, they actually share the same mechanism, that is: /get
  file path under the cursor and update preview window accordingly./ Displaying
  minibuffer file preview in a "dirvish" way, not only a lot of source code can
  be reused, but also related user configurations.  In other words, you don't
  have to configure file preview for dirvish and for minibuffer separately, they
  will always /display the same thing./

This feature is currently only available for *vertico/selectrum*.

** Configuration
*** Options

| Option                          | Type    | Description                             | default            |
|---------------------------------+---------+-----------------------------------------+--------------------|
| =dirvish-cache-dir=               | String  | Cache directory                         | "~/.cache/dirvish" |
| =dirvish-trash-dir-alist=         | Alist   | Setup multiple trash cans.              | nil                |
| =dirvish-history-length=          | Integer | The length of history ring              | 30                 |
| =dirvish-depth=                   | Integer | Level of dirs to traverse up            | 1                  |
| =dirvish-parent-max-width=        | Float   | Max width of parent windows             | 0.12               |
| =dirvish-parent-face-remap-alist= | Alist   | See: M-x =describe-variable=              |                    |
| =dirvish-preview-width=           | Float   | Width of preview window                 | 0.65               |
| =dirvish-body-fontsize-increment= | Float   | Increase fontsize in dirvish body       | 0.1                |
| =dirvish-mode-line-format=        | Cons    | See: M-x =describe-variable=              |                    |
| =dirvish-header-line-format=      | List    | See: M-x =describe-variable=              |                    |
| =dirvish-header-style=            | Option  | Style for full-frame dirvish header     | large              |
| =dirvish-header-face-remap-alist= | Alist   | See: M-x =describe-variable=              |                    |
| =dirvish-show-icons=              | Boolean | Show icons                              | t                  |
| =dirvish-icon-delimiter=          | String  | The delimiter between icon and filename | "\t"               |
| =dirvish-icon-monochrome=         | Boolean | Whether icon inherit =face-at-point=      | t                  |
| =dirvish-icon-v-offset=           | Float   | Icon's vertical offset                  | 0.01               |
| =dirvish-preview-dispatchers=     | Hook    | See: M-x =describe-variable=              |                    |

*** Hooks

| Hook                       | Description                               |
|----------------------------+-------------------------------------------|
| =dirvish-activation-hook=    | Hook for dirvish instance initialization. |
| =dirvish-mode-hook=          | Hook for parent buffer initialization.    |
| =dirvish-preview-setup-hook= | Hook for preview buffer initialization.   |

*** Example config

Here is an example config.  Note that although we have =dirvish-mode-map=, it's
recommended to bind your desired commands to =dired-mode-map= because I may remove
=dirvish-mode-map= in the future. There are several third-party packages that are
listed in this section, all of these tools are independent to each other yet can
operate in tandem.  I highly suggest you trying them out and see if they can
improve your workflow. [TODO: a video demo] The compatibilities with other
packages still needs work, but generally Dirvish works fine with the Dired
ecosystem.

#+begin_src emacs-lisp
  (use-package dired
    :config
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-dwim-target t)
    (setq dired-listing-switches "-AGhlv --group-directories-first --time-style=long-iso"))

  (use-package dired-x
    ;; Enable dired-omit-mode by default
    ;; :hook
    ;; (dired-mode . dired-omit-mode)
    :config
    ;; Make dired-omit-mode hide all "dotfiles"
    (setq dired-omit-files
          (concat dired-omit-files "\\|^\\..*$")))

  ;; Addtional syntax highlighting for dired
  (use-package diredfl
    :hook
    (dired-mode . diredfl-mode))

  ;; Narrow a dired buffer to the files matching a string.
  (use-package dired-narrow
    :config
    (bind-key "C-c C-n" 'dired-narrow dired-mode-map))

  ;; A poor man's treemacs
  (use-package dired-subtree
    :config
    (bind-key "TAB" 'dired-subtree-toggle dired-mode-map))

  ;; Drop-in replacement for find-dired
  (use-package fd-dired
    :config
    (bind-key "C-c C-f" 'fd-dired dired-mode-map))

  (use-package dirvish
    :config
    ;; Override dired with dirvish globally
    (dirvish-override-dired-mode)
    ;; Enable file preview when narrowing files in minibuffer.
    ;; This feature only support `vertico/selectrum' for now.
    (dirvish-minibuf-preview-mode)
    :bind
    (:map dired-mode-map
          ("SPC" . dirvish-show-history)
          ([remap dired-do-copy] . dirvish-yank)
          ("o" . dirvish-other-buffer)))
#+end_src

** Similar projects
*** Ranger.el

Although these 2 packages have something in common, unlike *ranger.el*, which
tries to become an all-around emulation of ranger, *dirvish* is more bare-bone,
meaning it does *NOT* try to port all "goodness" from ranger. Instead, it only
aims to:

- Provides a better dired UI
- Integrates all sensible dired commands

** Issues

- Bugs are expected on Windows since dirvish has not been tested on it.
- *WIP*: compatibility issues with some third-party dired related packages.
- *WIP*: marks does not display correctly when revisit the same dirvish buffer.

Feel free to report issues.

** Acknowledgements

This package is inspired a lot by [[https://github.com/ralesi/ranger.el][ranger.el]], thanks @ralesi for creating and
maintaining it.

