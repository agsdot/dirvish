;;; dirvish-structs.el --- Dirvish data structures -*- lexical-binding: t -*-

;; This file is NOT part of GNU Emacs.

;; SPDX-License-Identifier: GPL-3.0-or-later

;;; Commentary:

;;; This file contains data structures for dirvish.

;;; Code:

(declare-function dirvish--add-advices "dirvish-advices")
(declare-function dirvish--clean-advices "dirvish-advices")
(require 'dirvish-vars)
(require 'recentf)

(defun dirvish-curr (&optional frame)
  "Get dirvish metadata in FRAME.

FRAME defaults to current frame."
  (frame-parameter frame 'dirvish--curr))

(defun dirvish--reclaim-current (_frame)
  "Reclaim `dirvish--curr' in current frame."
  (when-let ((dv-name (buffer-local-value 'dirvish--curr-name (current-buffer))))
    (set-frame-parameter nil 'dirvish--curr (gethash dv-name (dirvish-hash)))
    (dirvish-reset t)))

(defmacro dirvish--get-buffer (type &rest body)
  "Return dirvish buffer with TYPE.
If BODY is non-nil, create the buffer and execute BODY in it."
  (declare (indent 1))
  `(progn
     (let* ((id (frame-parameter nil 'window-id))
            (h-name (format " *Dirvish %s-%s*" ,type id))
            (p-name (intern (format "dirvish--%s" ,type)))
            (buf (get-buffer-create h-name)))
       ,(if body
            `(with-current-buffer buf
               ,@body
               (set-frame-parameter nil p-name buf))
          `(frame-parameter nil p-name)))))

(defun dirvish-init-frame (&optional frame)
  "Initialize the dirvishs system in FRAME.
By default, this uses the current frame."
  (with-selected-frame frame
    (modify-frame-parameters
     frame '((dirvish--hash)
             (dirvish--curr)))
    ;; Don't set these variables in modify-frame-parameters
    ;; because that won't do anything if they've already been accessed
    (set-frame-parameter frame 'dirvish--hash (make-hash-table :test 'equal))
    (dirvish--get-buffer "preview"
      (setq-local mode-line-format nil))
    (dirvish--get-buffer "header"
      (setq-local face-font-rescale-alist nil))))

(defun dirvish-hash (&optional frame)
  "Return a hash containing all dirvish instance in FRAME.

The keys are the dirvish's names (automatically generated by
`cl-gensym'). The values are dirvish structs created by
`dirvish--new'.

FRAME defaults to the currently selected frame."
  ;; XXX: This must return a non-nil value to avoid breaking frames initialized
  ;; with after-make-frame-functions bound to nil.
  (or (frame-parameter frame 'dirvish--hash)
      (make-hash-table)))

(defun dirvish-all-names ()
  "Return a list of the dirvish names for all frames."
  (cl-reduce #'cl-union (mapcar
                         (lambda (fr)
                           (with-selected-frame fr
                             (mapcar #'dv-name (hash-table-values (dirvish-hash)))))
                         (frame-list))))

(defun dirvish-all-parent-buffers ()
  "Return a list of the dirvish parent buffers for all frames."
  (delete-dups
   (flatten-tree (mapcar
                  (lambda (fr)
                    (with-selected-frame fr
                      (mapcar #'dv-parent-buffers (hash-table-values (dirvish-hash)))))
                  (frame-list)))))

(cl-defstruct (dirvish
               (:conc-name dv-)
               (:constructor dirvish--new))
  "Define dirvish data type.

It has following fields:

NAME is the a symbol that is unique for every instance.

ONE-WINDOW-P indicates if this instance only display one window.

HEADER-FRAME is the frame created by `posframe-show' for header display.

HEADER-BUFFER is a buffer contains dirvish header text.

HEADER-WIDTH is the calculated header frame width.

PARENT-BUFFERS holds all `dirvish-mode' buffers in this instance.

PARENT-WINDOWS holds all `dirvish-mode' windows in this instance.

PREVIEW-WINDOW is the window display file preview.

PREVIEW-BUFFER is a buffer for dirvish preview content.

PREVIEW-BUFFERS holds all file preview buffers in this instance.

PREVIEW-PIXEL-WIDTH is the pixelwise width of preview window.

SAVED-RECENTF is a backup of original `recentf-list'.

WINDOW-CONF is the window configuration given by
`current-window-configuration'.

ROOT-WINDOW is the main dirvish window.

INDEX-PATH is the file path under cursor in ROOT-WINDOW.

LS-SWITCHES is the list switches passed to `ls' command.

SORT-CRITERIA is the addtional sorting flag added to LS-SWITCHES."
  (name (cl-gensym))
  one-window-p
  header-frame
  (header-buffer (dirvish--get-buffer "header"))
  header-width
  (parent-buffers ())
  parent-windows
  preview-window
  (preview-buffer (dirvish--get-buffer "preview"))
  (preview-buffers ())
  preview-pixel-width
  (saved-recentf recentf-list)
  (window-conf (current-window-configuration))
  (root-window (progn
                (when (window-parameter nil 'window-side) (delete-window))
                (frame-selected-window)))
  index-path
  (ls-switches dired-listing-switches)
  (sort-criteria (cons "default" "")))

(defmacro dirvish-new (&rest args)
  "Create a new dirvish struct and put it into `dirvish-hash'.

ARGS is a list of keyword arguments followed by an optional BODY.
The keyword arguments set the fields of the dirvish struct.
If BODY is given, it is executed to set the window configuration
for the dirvish.

Save point, and current buffer before executing BODY, and then
restore them after."
  (declare (indent defun))
  (let ((keywords))
    (while (keywordp (car args))
      (dotimes (_ 2) (push (pop args) keywords)))
    (setq keywords (reverse keywords))
    `(let ((dv (dirvish--new ,@keywords)))
       (puthash (dv-name dv) dv (dirvish-hash))
       ,(when args `(save-excursion ,@args)) ; Body form given
       dv)))

(defun dirvish-activate (&optional one-window-p)
  "Save previous window config and initialize dirvish.

If ONE-WINDOW-P, initialize dirvish in current window rather than
the whole frame."
  (dirvish-posframe-guard one-window-p)
  (when (eq major-mode 'dirvish-mode) (dirvish-deactivate))
  (set-frame-parameter nil 'dirvish--curr
                       (dirvish-new :one-window-p one-window-p))
  (dirvish--add-advices)
  (when (and (dirvish--get-IO-status)
             (not one-window-p))
    (dirvish-repeat dirvish-footer-update 0 dirvish-footer-repeat)
    (dirvish-repeat dirvish--set-IO-status 0 dirvish-footer-repeat)))

(defun dirvish-deactivate ()
  "Revert previous window config and deinit dirvish."
  (when-let ((curr-dv (dirvish-curr)))
    (setq recentf-list (dv-saved-recentf curr-dv))
    (posframe-delete-frame (dv-header-buffer curr-dv))
    (unless (dv-one-window-p curr-dv)
      (set-window-configuration (dv-window-conf curr-dv)))
    (mapc #'kill-buffer (dv-parent-buffers curr-dv))
    (mapc #'kill-buffer (dv-preview-buffers curr-dv))
    (remhash (dv-name curr-dv) (dirvish-hash))
    (unless (dirvish-all-names)
      (dirvish--clean-advices)
      (dolist (tm dirvish-repeat-timers) (cancel-timer (symbol-value tm))))
    (message "%s" (dirvish-all-names))
    (unless (dirvish--reclaim-current (selected-frame))
      (set-frame-parameter nil 'dirvish--curr nil))))

(provide 'dirvish-structs)

;;; dirvish-structs.el ends here
